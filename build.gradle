plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id "org.sonarqube" version "4.2.1.3168"
}

apply from: 'setup/publishing.gradle'
apply from: 'setup/reporting.gradle'

group 'dev.harrel'
version '1.1.0'

sourceCompatibility JavaVersion.VERSION_17
targetCompatibility JavaVersion.VERSION_17

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.compilerArgs.addAll(['--release', '8'])
}

java {
    withSourcesJar()
    withJavadocJar()
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    registerFeature('jackson') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('gson') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('orgJson') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('jettison') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('jakartaJson') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('jsonSmart') {
        usingSourceSet(sourceSets.main)
    }
}

repositories {
    mavenCentral()
}

def jsonProviders = [
        jackson    : 'com.fasterxml.jackson.core:jackson-databind:2.15.0',
        gson       : 'com.google.code.gson:gson:2.10.1',
        orgJson    : 'org.json:json:20230618',
        jettison   : 'org.codehaus.jettison:jettison:1.5.4',
        jakartaJson: 'jakarta.json:jakarta.json-api:2.1.2',
        jsonSmart  : 'net.minidev:json-smart:2.4.11'
]

jsonProviders.entrySet().forEach {
    dependencies.add("${it.key}Implementation", it.value)
    setupProviderTest(it.key, it.value)
}

dependencies {
    testImplementation 'org.eclipse.parsson:parsson:1.1.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}

test {
    useJUnitPlatform()
}

def setupProviderTest(String provider, String dependency) {
    def taskName = "${provider}Test"
    def configName = "${taskName}Implementation"
    sourceSets.create(taskName) {
        java {
            srcDir file("src/provider-test/$provider")
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
    tasks.getByName("compile${taskName.capitalize()}Java") {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    configurations.getByName(configName).extendsFrom configurations.getByName('testImplementation')
    dependencies.add(configName, dependency)
    tasks.register(taskName, Test) {
        useJUnitPlatform()
        group = 'verification'
        testClassesDirs = sourceSets.getByName(taskName).output.classesDirs
        classpath = sourceSets.getByName(taskName).runtimeClasspath
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }
    tasks.check.dependsOn taskName
}