plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
}

group 'dev.harrel'
version '1.1.0'

sourceCompatibility JavaVersion.VERSION_17
targetCompatibility JavaVersion.VERSION_17

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.compilerArgs.addAll(['--release', '8'])
}

java {
    withSourcesJar()
    withJavadocJar()
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    registerFeature('jackson') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('gson') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('orgJson') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('jettison') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('jakartaJson') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('jsonSmart') {
        usingSourceSet(sourceSets.main)
    }
}

repositories {
    mavenCentral()
}

def JACKSON_VERSION = '2.15.2'
def GSON_VERSION = '2.10.1'
def ORG_JSON_VERSION = '20230618'
def JETTISON_VERSION = '1.5.4'
def JAKARTA_JSON_VERSION = '2.1.2'
def JSON_SMART_VERSION = '2.4.11'

setupProviderTest('jackson', "com.fasterxml.jackson.core:jackson-databind:$JACKSON_VERSION")
setupProviderTest('gson', "com.google.code.gson:gson:$GSON_VERSION")
setupProviderTest('orgJson', "org.json:json:$ORG_JSON_VERSION")
setupProviderTest('jettison', "org.codehaus.jettison:jettison:$JETTISON_VERSION")
setupProviderTest('jakartaJson', "jakarta.json:jakarta.json-api:$JAKARTA_JSON_VERSION")
setupProviderTest('jsonSmart', "net.minidev:json-smart:$JSON_SMART_VERSION")

dependencies {
    jacksonImplementation "com.fasterxml.jackson.core:jackson-databind:$JACKSON_VERSION"
    gsonImplementation "com.google.code.gson:gson:$GSON_VERSION"
    orgJsonImplementation "org.json:json:$ORG_JSON_VERSION"
    jettisonImplementation "org.codehaus.jettison:jettison:$JETTISON_VERSION"
    jakartaJsonImplementation "jakarta.json:jakarta.json-api:$JAKARTA_JSON_VERSION"
    jsonSmartImplementation "net.minidev:json-smart:$JSON_SMART_VERSION"

    testImplementation 'org.eclipse.parsson:parsson:1.1.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = 'reposilite'
            url = findProperty('reposiliteSnapshots')
            credentials {
                username = findProperty('reposiliteUsername')
                password = findProperty('reposilitePassword')
            }
        }
        maven {
            name = 'sonatype'
            url = findProperty('sonatypeRepo')
            credentials {
                username = findProperty('sonatypeUsername')
                password = findProperty('sonatypePassword')
            }
        }
    }
    publications {
        local(MavenPublication) {
            from components.java
        }
        sonatype(MavenPublication) {
            from components.java
            pom {
                name = 'json-schema'
                description = 'Library for JSON schema validation'
                url = 'https://github.com/harrel56/json-schema'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/harrel56/json-schema/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'harrel56'
                        name = 'Harrel'
                        url = 'https://harrel.dev'
                    }
                }
                scm {
                    url = 'https://github.com/harrel56/json-schema'
                    connection = 'scm:git:git://github.com/harrel56/json-schema.git'
                    developerConnection = 'scm:git:git://github.com/harrel56/json-schema.git'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/harrel56/json-schema/issues'
                }
            }
        }
    }
}

signing {
    if (findProperty('signingKey') != null) {
        def decodedKey = new String(findProperty('signingKey').decodeBase64())
        useInMemoryPgpKeys(decodedKey, findProperty('signingPassword'))
    }
    sign publishing.publications.sonatype
}

jacocoTestReport {
    reports.html.required = false
    reports.csv.required = true
}

def setupProviderTest(String provider, String dependency) {
    def taskName = "${provider}Test"
    def configName = "${taskName}Implementation"
    sourceSets.create(taskName) {
        java {
            srcDir file("src/provider-test/$provider")
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
    configurations.getByName(configName).extendsFrom configurations.getByName('testImplementation')
    dependencies.add(configName, dependency)
    tasks.register(taskName, Test) {
        useJUnitPlatform()
        group = 'verification'
        testClassesDirs = sourceSets.getByName(taskName).output.classesDirs
        classpath = sourceSets.getByName(taskName).runtimeClasspath
    }
    tasks.check.dependsOn taskName
}