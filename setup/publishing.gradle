publishing {
    repositories {
        maven {
            name = 'reposilite'
            url = findProperty('reposiliteSnapshots')
            credentials {
                username = findProperty('reposiliteUsername')
                password = findProperty('reposilitePassword')
            }
        }
        maven {
            name = 'sonatype'
            url = findProperty('sonatypeRepo')
            credentials {
                username = findProperty('sonatypeUsername')
                password = findProperty('sonatypePassword')
            }
        }
    }
    publications {
        local(MavenPublication) {
            from components.java
        }
        sonatype(MavenPublication) {
            from components.java
            pom {
                name = 'json-schema'
                description = 'Library for JSON schema validation'
                url = 'https://github.com/harrel56/json-schema'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/harrel56/json-schema/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'harrel56'
                        name = 'Harrel'
                        url = 'https://harrel.dev'
                    }
                }
                scm {
                    url = 'https://github.com/harrel56/json-schema'
                    connection = 'scm:git:git://github.com/harrel56/json-schema.git'
                    developerConnection = 'scm:git:git://github.com/harrel56/json-schema.git'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/harrel56/json-schema/issues'
                }
            }
        }
    }
}

signing {
    if (findProperty('signingKey') != null) {
        def decodedKey = new String(findProperty('signingKey').decodeBase64())
        useInMemoryPgpKeys(decodedKey, findProperty('signingPassword'))
    }
    sign publishing.publications.sonatype
}